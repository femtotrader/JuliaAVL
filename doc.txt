

Some general notes:

1. Several functions, such as first() and after() have versions with _kv suffix that returns 
   a (key, value) tupple instead of just a value. 
   
2. Nothing is optimized yet. Performance can improve considerably. 

3. I Still haven't added convert calls to assignments (and elsewhere), so the types are somewhat constrained: you can make a
   SDict of ('Char', Float64), but not of, say, (String, Number). I think the strict types makes for slightly easier debugging, so
   I'd like to keep it this way at least until I have optimized the core routines. 

4. SDict is currently implemented as an AVL tree. This may change to Holger's Red-Black or AA tree, or something else (skip list?) the
   choice of underlying datastructure could perhaps be given to the user.

5. Only basic linear time set operations are included. More 'intelligent' functions could perhaps be added, but mostly users can
   write their own functions based on requirements and knowledge of the data. 

6. Exceptions are just strings. I haven't focused on this at all yet.


If you find any errors or have any comments, questions or suggestions, please let me know: torgausen@gmail.com

The repo is at https://github.com/torgausen/JuliaAVL

--------------------------------------------------------------------------------------------------------------------------------------

How to use:

require("SortDict.jl") 
import SortDict.*
sd = SDict(Float64, Int)
sd[1.23] = 123

----------------------

SDict(ks, vs)
SDict(K, V)
SDict(d :: Dict)
SDict(a :: Tuple[])

	Creates a new SDict from an vector of keys and a corresponding vector of values.

	example:

	sd = SDict(
		["One", "Two", "Two and a half"], 
		[1.0, 2.0, 2.5]
	)

	The isless comarator will be used, unless you specify your own as a third argument.
	The keys must be sorted with no equal keys (according to the compare function used)

	SDict(K, V) creates a new empty SDict for keys of type K, values of type V
	Values can then be assigned to keys like with a Dict(): sd[""] = "mama"

	You can also make SDicts out of Dicts or arrays of key, value tuples
	
eltype(sd) 

	returns tuple of types : (key_type, value_type)

	
isempty(sd)
length(sd) or numel(sd)
isequal(sd1, sd2)
	
	Obvious functions

	
copy(sd) 
	
	Returns a shallow copy of a tree.

	
deeper_copy(sd)

	Returns a not-so shallow copy of a tree.
	There is no way to guarantee true deep copy, since it all depends on the copy functions of the keys and values.

	
flatten(sd)
keys(sd)
values(sd)

	flatten returns tuple of arrays: (keys, values)

	
del_all(sd)

	Clear the SDict

	
map(fn, sd), map!(fn, sd)

	Applies fn to all values in sd. 
	
	
Goright
Goleft
Goright_kv
Goleft_kv
	
	These are iterator constructors. You can iterate over a SDict directly or get special iterators
	that begins at given keys and go left or right. These can of course be combined with Julia's generic 
	iterator functions.
	
	examples:
	
		sd = SDict([1,2,3,4], [1.0, 2.0, 3.0, 4.0])

		sum(sd) 	=> 10.0
	
	sum(sd) is the same as sum(Goright(sd))
	
		reduce ((a,b) -> (2a+b),2.0, (Goleft(sd)))	=> 81.0

		reduce ((a,b) -> (2a+b),2.0, (Goright(sd)))	=> 58.0
		
		sum(Goright(sd, 2)) 		=> 9.0
		
		for x in Goright(sd,2)
			print(x, " ")		=> 2.0 3.0 4.0 
		end

	The versions with _kv suffix returns (key, value) tuples instead of just values:
	
		for x in Goleft_kv(sd,2)
			print(x, " ")		=> (2,2.0) (1, 1.0) 
		end
	
	Time complexities for iterators are O(m + log n), where n is the size of the SDict, m the length of the iteration run.

	
split!(sd, key)

	Returns a SDict, sd2. 
	
	After the call, sd will contain all keys up to but not including 'key', while sd2 contains the rest.
	
	Runs in O(log n).
	
split_left!(sd, key)

	Returns a SDict, sd2. 
	
	After the call, sd2 contains all keys up to but not including 'key', sd contains the rest. 
	
	Runs in O(log n).
	
join!(sd1, sd2)

	Appends sd2 to the right of sd1. Note that the first element of sd2 must be strictly greater than
	the last element of sd1, otherwise an exception is thrown. Sd2 is always cleared when calling join!.
	
	Runs in O(log n).
	

first(sd)
last(sd)
first(sd, m)
last(sd, m)
first_kv(sd)
last_kv(sd)
first_kv(sd, m)
last_kv(sd, m)

	Returns the first or last element(s) of sd. Runs in O((log n) + m)

	
valid(sd)
	
	Checks that sd is actually a valid SDict. Returns false if the datastructure is somehow corrupted.
	Runs in linear time.

	
shift(sd) or del_first(sd)
pop(sd) or del_last(sd)
del_first_kv(sd)
del_last_kv(sd)

	Destructive functions that removes and returns items from the extreme ends of a non-empty SDict.
	Runs in log n

	
del(sd, key)
del(sd, key, default)
del_kv(sd, key)
del_kv(sd, key, default)

	Returns the deleted value or (key, value) tuple, which must exist, unless a default is given. 
	Runs in O(log n)
	

has(sd, key) or Contains(sd, key)

	Returns Bool. Runs in O(log n)

	
get(sd, key, default)

	Returns item, if it exist, else returns default. Runs in O(log n)

get_kv(sd, key, default)

	Same, but returns (key, value). Runs in O(log n)
	
rank(sd, key)

	Returns the position of key in the SDict
	example:
	
	sd = SDict(["Aardvark", "baa", "cab", "dab"], [8,3,3,3])

	rank(sd, "Aardvark") 	=> 1
	
	Note that ranks are 1-based, in accordance with Julia arrays.
	Runs in O(log n)
	
	
select(sd, r)
select_kv(sd, r)
	Returns the value or (key, value) tuple associated with rank r
	
	Using the above sd, select_kv(sd, 3) would return ("cab", 3). 

	Note that select is 1-based, in accordance with Julia arrays.
	Runs in O(log n)
	
	
before(sd, key)
after(sd, key)
before_kv(sd, key)
after_kv(sd, key)

	returns the value or (key, value) tuple that comes just before or just after key.
	An exception is thrown if there is nothing in the SDict before or after the key.
	However, the key need not exist, so the following works:
	
	sd = SDict(["Aardvark", "baa", "cab", "dab"], [8,3,3,3])
	
	before(sd, "zebra") 	=> ("dab", 3)

	Runs in O(log n)


	
union(sd1, sd2)

	Returs the union of the two SDicts. Compare functions must be identical.
	The values from sd2 are used whenever equal keys are encountered.  
	Runs in O(n).


	Much faster union can be achieved with join! and split! if you happen to know that the keys in the
	respective dicts do not overlap much. Example:
	
	function union_quick!{K, V} (sd1 :: SDict{K, V}, sd2 :: SDict{K, V})
		# assume sd1 keys mostly smaller than sd2 keys
		a = first_kv(sd2)[KEY]
		b = last_kv(sd1)[KEY]
		sd1_r = split!(sd1, a)
		sd2_l = split_left!(sd2, b)
		join!(join!(sd1, union(sd1_r, sd2_l)), sd2) # the union call will check that compare functions are equal
	end

	
intersect(sd1, sd2)

	Returns the common elements of sd1 and sd2. 
	Runs in O(n).
	
	
difference(sd1, sd2)

	Returns the elements sd1 has, that sd2 doesn't have. 
	Runs in O(n).
